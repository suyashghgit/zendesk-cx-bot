{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Zendesk CX Bot Documentation","text":"<p>Welcome to the documentation for the Zendesk CX Bot - an intelligent FastAPI application that automates ticket categorization and analysis for Zendesk customer support systems.</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>The Zendesk CX Bot leverages Azure OpenAI's advanced language models to provide real-time ticket processing, automatic categorization, and quality analysis, significantly improving customer support efficiency and decision-making.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83e\udd16 AI-Powered Ticket Categorization: Automatic categorization using Azure OpenAI</li> <li>\ud83d\udcca Support Quality Analysis: Comprehensive analysis of support interactions</li> <li>\ud83d\udcf1 WhatsApp Integration: Create tickets directly through WhatsApp messages</li> <li>\ud83d\udd04 Real-time Processing: Webhook-based automation for instant responses</li> <li>\ud83d\udcc8 Scalable Architecture: Handles any volume of tickets efficiently</li> </ul>"},{"location":"#documentation-sections","title":"\ud83d\udcda Documentation Sections","text":""},{"location":"#overview","title":"Overview","text":"<p>Comprehensive technical documentation covering: - Problem statement and solution approach - Architecture overview and key components - Core functionality details - Technical implementation and configuration - Business and technical value</p>"},{"location":"#architecture","title":"Architecture","text":"<p>System architecture visualization showing: - WhatsApp ticket creation flow - Regular Zendesk ticket creation flow - Common categorization flow - Ticket solved analysis process</p>"},{"location":"#development-setup","title":"Development Setup","text":"<p>Local development guide including: - ngrok setup for local development - Twilio webhook configuration - Testing and troubleshooting steps - Production deployment considerations</p>"},{"location":"#technology-stack","title":"\ud83d\udee0 Technology Stack","text":"<ul> <li>Backend Framework: FastAPI (Python)</li> <li>AI Engine: Azure OpenAI GPT models</li> <li>API Integration: Zendesk REST API</li> <li>Messaging Platform: Twilio WhatsApp Business API</li> <li>Configuration: Pydantic Settings</li> <li>Logging: Python logging with file and console output</li> <li>Deployment: Uvicorn server</li> </ul>"},{"location":"#use-cases","title":"\ud83c\udfaf Use Cases","text":"<ol> <li> <p>Automatic Ticket Categorization: When a new ticket is created, the system automatically categorizes it into predefined categories using AI analysis.</p> </li> <li> <p>Support Quality Analysis: When a ticket is marked as \"SOLVED\", the system analyzes the entire conversation for sentiment, empathy, clarity, and provides actionable insights.</p> </li> <li> <p>WhatsApp Integration: Customers can create support tickets directly through WhatsApp messages, with automatic validation and ticket creation.</p> </li> </ol>"},{"location":"#getting-started","title":"\ud83d\udd27 Getting Started","text":"<ol> <li>Install Dependencies: <code>pip install -r requirements.txt</code></li> <li>Configure Environment: Copy <code>env_example.txt</code> to <code>.env</code> and fill in your credentials</li> <li>Run Application: <code>python main.py</code></li> <li>Access Documentation: Visit the sections above for detailed guides</li> </ol>"},{"location":"#additional-resources","title":"\ud83d\udcd6 Additional Resources","text":"<ul> <li>GitHub Repository: zendesk-cx-bot</li> <li>Environment Setup: See <code>env_example.txt</code> for required configuration</li> <li>Requirements: See <code>requirements.txt</code> for Python dependencies</li> </ul> <p>This documentation is built with MkDocs and the Material for MkDocs theme.</p>"},{"location":"APPLICATION_WRITEUP/","title":"Zendesk CX Bot - Application Write-up","text":""},{"location":"APPLICATION_WRITEUP/#overview","title":"Overview","text":"<p>The Zendesk CX Bot is an intelligent FastAPI application that automates ticket categorization and analysis for Zendesk customer support systems. It leverages Azure OpenAI's advanced language models to provide real-time ticket processing, automatic categorization, and quality analysis, significantly improving customer support efficiency and decision-making. Additionally, the application includes a comprehensive Twilio WhatsApp integration that allows customers to create support tickets directly through WhatsApp messages.</p>"},{"location":"APPLICATION_WRITEUP/#problem-statement","title":"Problem Statement","text":"<p>Customer support teams face several critical challenges:</p> <ol> <li>Manual Ticket Categorization: Support agents spend significant time manually categorizing tickets, leading to delays and inconsistencies</li> <li>Quality Assessment: Lack of systematic analysis of support interactions to identify areas for improvement</li> <li>Scalability Issues: As ticket volume grows, manual processes become unsustainable</li> <li>Inconsistent Responses: Human categorization can be subjective and inconsistent across different agents</li> <li>Missing Insights: Valuable data from support interactions often goes unanalyzed</li> </ol>"},{"location":"APPLICATION_WRITEUP/#solution-approach","title":"Solution Approach","text":""},{"location":"APPLICATION_WRITEUP/#architecture-overview","title":"Architecture Overview","text":"<p>The application follows a microservices architecture with clear separation of concerns:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Zendesk       \u2502    \u2502   FastAPI App    \u2502\u25c4\u2500\u2500\u2500\u2502   Azure OpenAI  \u2502\n\u2502   Webhooks      \u2502\u2500\u2500\u2500\u25b6\u2502   (Main Logic)   \u2502\u2500\u2500\u2500\u25b6\u2502   (AI Engine)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                              \u25bc\n                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                       \u2502   Zendesk API    \u2502\n                       \u2502   (Updates)      \u2502\n                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"APPLICATION_WRITEUP/#key-components","title":"Key Components","text":"<ol> <li>FastAPI Application (<code>main.py</code>)</li> <li>RESTful API server with webhook endpoints</li> <li>CORS middleware for cross-origin requests</li> <li> <p>Comprehensive logging and error handling</p> </li> <li> <p>Webhook Router (<code>app/routers/webhook.py</code>)</p> </li> <li>Handles ticket creation events (<code>/ticketCreatedWebhook</code>)</li> <li>Processes status change events (<code>/ticketStatusChangedWebhook</code>)</li> <li> <p>Extracts and validates ticket data</p> </li> <li> <p>Twilio Router (<code>app/routers/twilio.py</code>)</p> </li> <li>Handles WhatsApp webhooks (<code>/twilio/whatsapp</code>)</li> <li>Processes message status callbacks (<code>/twilio/status</code>)</li> <li>Validates Twilio webhook signatures for security</li> <li> <p>Manages WhatsApp message processing and ticket creation</p> </li> <li> <p>Azure OpenAI Service (<code>services/azure_openai.py</code>)</p> </li> <li>Intelligent ticket categorization using GPT models</li> <li>Support quality analysis and insights generation</li> <li> <p>Structured JSON responses for easy integration</p> </li> <li> <p>Zendesk Service (<code>services/zendesk.py</code>)</p> </li> <li>API integration for ticket updates</li> <li>Comment extraction and analysis</li> <li> <p>Automated tagging and categorization</p> </li> <li> <p>Twilio Service (<code>services/twilio.py</code>)</p> </li> <li>WhatsApp message processing and validation</li> <li>Automatic ticket creation from WhatsApp messages</li> <li>Phone number formatting and validation</li> <li> <p>Webhook signature validation for security</p> </li> <li> <p>Utility Functions (<code>app/utils.py</code>)</p> </li> <li>Request ID generation for tracking</li> <li>Data parsing and validation</li> <li>Standardized response formatting</li> </ol>"},{"location":"APPLICATION_WRITEUP/#core-functionality","title":"Core Functionality","text":""},{"location":"APPLICATION_WRITEUP/#1-automatic-ticket-categorization","title":"1. Automatic Ticket Categorization","text":"<p>When a new ticket is created, the system:</p> <ol> <li>Receives webhook from Zendesk with ticket details</li> <li>Extracts data (subject, description, ticket ID)</li> <li>Analyzes content using Azure OpenAI's GPT model</li> <li>Categorizes ticket into predefined categories:</li> <li><code>human_resources</code>, <code>engineering</code>, <code>it_support</code>, <code>product</code>, <code>design</code></li> <li><code>sales</code>, <code>marketing</code>, <code>finance</code>, <code>legal</code>, <code>customer_support</code></li> <li><code>operations</code>, <code>executive</code></li> <li>Updates ticket with automatic tags and categorization comments</li> <li>Logs results for audit and monitoring</li> </ol>"},{"location":"APPLICATION_WRITEUP/#2-support-quality-analysis","title":"2. Support Quality Analysis","text":"<p>When a ticket is marked as \"SOLVED\", the system:</p> <ol> <li>Triggers analysis based on status change</li> <li>Extracts comments from the entire conversation (public comments only)</li> <li>Analyzes interaction using AI for:</li> <li>Sentiment analysis (Positive, Neutral, Negative)</li> <li>Satisfaction likelihood (High, Medium, Low)</li> <li>Agent empathy score (1-5 scale)</li> <li>Clarity score (1-5 scale)</li> <li>Pain points identification</li> <li>Frustration signals detection</li> <li>Action recommendations</li> <li>Updates ticket with comprehensive analysis report (as private comment for internal use only)</li> <li>Provides insights for continuous improvement</li> </ol>"},{"location":"APPLICATION_WRITEUP/#3-whatsapp-integration","title":"3. WhatsApp Integration","text":"<p>The application includes a comprehensive WhatsApp integration that allows customers to create support tickets directly through WhatsApp messages:</p> <p>WhatsApp Ticket Creation Workflow: 1. Customer sends WhatsApp message to the configured Twilio WhatsApp number 2. Twilio webhook sends message to <code>/twilio/whatsapp</code> endpoint 3. System validates content (minimum 10 characters, meaningful content) 4. If valid \u2192 Creates Zendesk ticket automatically with:    - Subject generated from first sentence (max 50 characters)    - Full message as description    - Requester info (WhatsApp User + phone number)    - Priority determined by content analysis 5. If insufficient \u2192 Sends WhatsApp message asking for more details 6. Customer receives confirmation WhatsApp message with ticket number</p> <p>WhatsApp Validation Rules: - Minimum length: 10 characters - Must contain actionable content: Not just \"hi\", \"help\", \"hello\" - Should describe an issue or request: Contains problem-related keywords</p> <p>Security Features: - Webhook signature validation for enhanced security - Phone number formatting and validation - Error handling with graceful fallbacks - Comprehensive logging for audit and debugging</p>"},{"location":"APPLICATION_WRITEUP/#technical-implementation","title":"Technical Implementation","text":""},{"location":"APPLICATION_WRITEUP/#technology-stack","title":"Technology Stack","text":"<ul> <li>Backend Framework: FastAPI (Python)</li> <li>AI Engine: Azure OpenAI GPT models</li> <li>API Integration: Zendesk REST API</li> <li>Messaging Platform: Twilio WhatsApp Business API</li> <li>Configuration: Pydantic Settings</li> <li>Logging: Python logging with file and console output</li> <li>Deployment: Uvicorn server</li> </ul>"},{"location":"APPLICATION_WRITEUP/#key-features","title":"Key Features","text":"<ol> <li>Asynchronous Processing: All operations are async for better performance</li> <li>Error Handling: Comprehensive error handling with detailed logging</li> <li>Request Tracking: Unique request IDs for all operations</li> <li>Data Validation: Robust data parsing and validation</li> <li>Scalable Architecture: Modular design for easy extension</li> <li>Multi-Channel Support: Webhooks and WhatsApp integration</li> <li>Security: Webhook signature validation and secure API key management</li> </ol>"},{"location":"APPLICATION_WRITEUP/#configuration-management","title":"Configuration Management","text":"<p>The application uses environment variables for configuration:</p> <pre><code># Azure OpenAI Configuration\nazure_openai_api_key=your_azure_openai_api_key_here\nazure_openai_endpoint=https://your-resource.cognitiveservices.azure.com/\nazure_openai_deployment=your-deployment-name\nazure_openai_model=your-model-name\nazure_openai_api_version=2024-12-01-preview\n\n# Zendesk Configuration\nzendesk_domain=your-zendesk-domain\nzendesk_email=your-zendesk-email\nzendesk_api_key=your-zendesk-api-key\n\n# Twilio Configuration\ntwilio_account_sid=your_twilio_account_sid\ntwilio_auth_token=your_twilio_auth_token\ntwilio_whatsapp_number=+1234567890\ntwilio_content_sid=your_content_sid\n</code></pre>"},{"location":"APPLICATION_WRITEUP/#how-to-run-the-code","title":"How to Run the Code","text":""},{"location":"APPLICATION_WRITEUP/#prerequisites","title":"Prerequisites","text":"<ol> <li>Python 3.8+ installed</li> <li>Azure OpenAI account and API key</li> <li>Zendesk account with API access</li> <li>Twilio account with WhatsApp Business API access</li> <li>Git for cloning the repository</li> </ol>"},{"location":"APPLICATION_WRITEUP/#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone &lt;repository-url&gt;\ncd zendesk-cx-bot\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Set up environment variables:    <pre><code>cp env_example.txt .env\n# Edit .env with your actual credentials\n</code></pre></p> </li> <li> <p>Configure Twilio WhatsApp (NEW):</p> </li> <li>Set up WhatsApp Business API in Twilio Console</li> <li>Configure webhook endpoints:<ul> <li>WhatsApp webhook: <code>https://your-domain.com/twilio/whatsapp</code></li> </ul> </li> <li> <p>Add all Twilio credentials to <code>.env</code> file</p> </li> <li> <p>Run the application:    <pre><code>python main.py\n</code></pre></p> </li> <li> <p>Verify the application:</p> </li> <li>Health check: <code>http://localhost:8080/health</code></li> <li>Root endpoint: <code>http://localhost:8080/</code></li> </ol>"},{"location":"APPLICATION_WRITEUP/#development-mode","title":"Development Mode","text":"<p>For development with auto-reload: <pre><code>python main.py\n</code></pre></p> <p>The application will automatically reload when code changes are detected.</p>"},{"location":"APPLICATION_WRITEUP/#why-this-solution-works","title":"Why This Solution Works","text":""},{"location":"APPLICATION_WRITEUP/#1-intelligent-automation","title":"1. Intelligent Automation","text":"<p>The application replaces manual categorization with AI-powered analysis, ensuring: - Consistency: AI provides uniform categorization across all tickets - Accuracy: Advanced language models understand context and nuances - Speed: Real-time processing eliminates manual delays - Scalability: Handles any volume of tickets without additional resources</p>"},{"location":"APPLICATION_WRITEUP/#2-comprehensive-analysis","title":"2. Comprehensive Analysis","text":"<p>The support quality analysis provides: - Actionable Insights: Identifies specific areas for improvement - Customer Experience: Tracks sentiment and satisfaction metrics - Agent Performance: Evaluates empathy and clarity scores - Process Optimization: Recommends actions for better support</p>"},{"location":"APPLICATION_WRITEUP/#3-seamless-integration","title":"3. Seamless Integration","text":"<p>The solution integrates seamlessly with existing Zendesk workflows: - Non-disruptive: Works alongside existing processes - Automatic Updates: Updates tickets with AI insights automatically - Audit Trail: Comprehensive logging for compliance and debugging - Backward Compatible: Doesn't require changes to existing Zendesk setup</p>"},{"location":"APPLICATION_WRITEUP/#4-business-value","title":"4. Business Value","text":"<p>The application delivers significant business value:</p> <ul> <li>Reduced Response Times: Automatic categorization speeds up ticket routing</li> <li>Improved Customer Satisfaction: Better categorization leads to faster resolution</li> <li>Operational Efficiency: Reduces manual workload for support teams</li> <li>Data-Driven Insights: Provides analytics for continuous improvement</li> <li>Cost Savings: Reduces manual processing costs and improves resource allocation</li> </ul>"},{"location":"APPLICATION_WRITEUP/#5-technical-value","title":"5. Technical Value","text":"<p>The solution demonstrates technical best practices:</p> <ul> <li>Modular Design: Easy to maintain and extend</li> <li>Error Handling: Robust error handling and logging</li> <li>Performance: Asynchronous processing for optimal performance</li> <li>Security: Secure API key management and validation</li> <li>Monitoring: Comprehensive logging and request tracking</li> </ul>"},{"location":"APPLICATION_WRITEUP/#conclusion","title":"Conclusion","text":"<p>The Zendesk CX Bot represents a modern, intelligent solution to customer support automation challenges. By leveraging Azure OpenAI's advanced language models, it provides accurate, consistent, and scalable ticket processing that significantly improves support team efficiency and customer experience.</p> <p>The application's modular architecture, comprehensive error handling, and seamless integration make it a robust solution for organizations looking to modernize their customer support operations. The combination of automatic categorization and quality analysis provides both immediate operational benefits and long-term strategic insights for continuous improvement. </p>"},{"location":"LOCAL_DEVELOPMENT_SETUP/","title":"Local Development Setup with ngrok","text":"<p>This guide will help you set up local development for the Twilio WhatsApp integration using ngrok.</p>"},{"location":"LOCAL_DEVELOPMENT_SETUP/#prerequisites","title":"Prerequisites","text":"<ol> <li>ngrok account: Sign up at ngrok.com</li> <li>ngrok installed: Download and install ngrok</li> <li>Local application running: Your FastAPI app should be running on localhost</li> </ol>"},{"location":"LOCAL_DEVELOPMENT_SETUP/#step-1-install-ngrok","title":"Step 1: Install ngrok","text":""},{"location":"LOCAL_DEVELOPMENT_SETUP/#using-homebrew-macos","title":"Using Homebrew (macOS)","text":"<pre><code>brew install ngrok\n</code></pre>"},{"location":"LOCAL_DEVELOPMENT_SETUP/#step-2-authenticate-ngrok","title":"Step 2: Authenticate ngrok","text":"<ol> <li>Get your authtoken from ngrok dashboard</li> <li>Run: <pre><code>ngrok config add-authtoken YOUR_AUTHTOKEN\n</code></pre></li> </ol>"},{"location":"LOCAL_DEVELOPMENT_SETUP/#step-3-start-your-application","title":"Step 3: Start Your Application","text":"<ol> <li> <p>Start your FastAPI application: <pre><code>python main.py\n</code></pre></p> </li> <li> <p>Your app should be running on <code>http://localhost:8080</code></p> </li> </ol>"},{"location":"LOCAL_DEVELOPMENT_SETUP/#step-4-expose-your-local-server","title":"Step 4: Expose Your Local Server","text":"<ol> <li>Open a new terminal window</li> <li> <p>Run ngrok to expose your local server: <pre><code>ngrok http 8080\n</code></pre></p> </li> <li> <p>You'll see output like: <pre><code>Session Status                online\nAccount                       your-email@example.com\nVersion                       3.x.x\nRegion                        United States (us)\nLatency                       51ms\nWeb Interface                 http://127.0.0.1:4040\nForwarding                    https://abc123.ngrok.io -&gt; http://localhost:8080\n</code></pre></p> </li> <li> <p>Copy the HTTPS URL (e.g., <code>https://abc123.ngrok.io</code>)</p> </li> </ol>"},{"location":"LOCAL_DEVELOPMENT_SETUP/#step-5-configure-twilio-webhooks","title":"Step 5: Configure Twilio Webhooks","text":"<ol> <li>Go to Twilio Console \u2192 Messaging \u2192 Settings \u2192 WhatsApp Sandbox</li> <li>Set the webhook URL to your ngrok URL:    <pre><code>https://abc123.ngrok.io/twilio/whatsapp\n</code></pre></li> <li>Set HTTP method to POST</li> <li>Save the configuration</li> </ol>"},{"location":"LOCAL_DEVELOPMENT_SETUP/#step-6-test-the-integration","title":"Step 6: Test the Integration","text":"<ol> <li>Join your WhatsApp sandbox (follow Twilio instructions)</li> <li>Send a WhatsApp message to the sandbox number</li> <li>Check your application logs for incoming webhooks</li> <li>Verify ticket creation in your Zendesk account</li> </ol>"},{"location":"LOCAL_DEVELOPMENT_SETUP/#step-7-monitor-webhooks","title":"Step 7: Monitor Webhooks","text":"<ol> <li>ngrok web interface: Visit <code>http://127.0.0.1:4040</code> to see all incoming requests</li> <li>Application logs: Check your application logs for webhook processing</li> <li>Twilio logs: Check Twilio console for webhook delivery status</li> </ol>"},{"location":"LOCAL_DEVELOPMENT_SETUP/#troubleshooting","title":"Troubleshooting","text":""},{"location":"LOCAL_DEVELOPMENT_SETUP/#common-issues","title":"Common Issues","text":"<ol> <li>ngrok URL changes on restart</li> <li>Solution: Update your Twilio webhook URL each time you restart ngrok</li> <li> <p>Alternative: Use ngrok with custom domains (requires paid plan)</p> </li> <li> <p>Webhook not reaching your app</p> </li> <li>Check if your app is running on port 8080</li> <li>Verify ngrok is forwarding to the correct port</li> <li>Check ngrok web interface for errors</li> </ol>"},{"location":"LOCAL_DEVELOPMENT_SETUP/#production-deployment","title":"Production Deployment","text":"<p>When you're ready for production:</p> <ol> <li>Deploy your application to a cloud service (AWS, Google Cloud, etc.)</li> <li>Get a public HTTPS URL for your application</li> <li>Update Twilio webhooks to use your production URL</li> <li>Update Zendesk webhooks to use your production URL</li> <li>Remove ngrok - it's only for local development</li> </ol>"},{"location":"LOCAL_DEVELOPMENT_SETUP/#security-considerations","title":"Security Considerations","text":"<ol> <li>ngrok exposes your local server - only use for development</li> <li>Anyone with the ngrok URL can access your app</li> <li>Don't use ngrok in production</li> <li>Keep ngrok sessions private - don't share URLs publicly </li> </ol>"},{"location":"architecture-diagram/","title":"Architecture","text":"<p>graph TD</p> <p>%% WhatsApp Ticket Creation Flow A1[User sends WhatsApp message] \u2192 TW[Twilio WhatsApp Webhook] TW \u2192 FP1[FastAPI AppTwilio Router] FP1 \u2192 V1[Validate WhatsApp Message] V1 \u2192|Valid| TC[Create Zendesk Ticket via API] V1 \u2192|Invalid| R1[Ask for More Info] TC \u2192 Z1[Zendesk Ticket Created]</p> <p>%% Regular Zendesk Ticket Creation Flow ZC[Ticket Created via Zendesk UI/API] \u2192 Z2[Zendesk Webhook Triggered]</p> <p>%% Common Categorization Flow Z1 \u2192 Z2 Z2 \u2192 FP2[FastAPI AppWebhook Router] FP2 \u2192 AI1[Azure OpenAICategorization] AI1 \u2192 C1[Generate Tags &amp; Category] C1 \u2192 ZU[Update Ticket via Zendesk API]</p> <p>%% Ticket Solved Analysis ZS[Ticket Marked as SOLVED] \u2192 Z3[Zendesk Webhook Triggered] Z3 \u2192 FP3[FastAPI AppWebhook Router] FP3 \u2192 AI2[Azure OpenAISupport Quality Analysis] AI2 \u2192 AR1[Generate Report:Sentiment, Empathy, Clarity, etc.] AR1 \u2192 PC[Post Private Comment to Ticket]</p>"}]}